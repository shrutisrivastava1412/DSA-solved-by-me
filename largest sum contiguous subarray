Method 1.   Brute force/ naive approach     -   O(n3)

#include <bits/stdc++.h>
using namespace std;

void maxSubarraySum(int arr[],int n){
    int max=INT_MIN;
    for (int i=0;i<n;i++) {
        for(int j=i;j<n;j++){
            int sum=0;
            for(int k=i;k<=j;k++){
                sum= sum+arr[k];
            }
            if(sum>max){
                max=sum;
            }
        }
    }
    cout<<max;
}
int main()
{
    
	int n;
	cin>>n;
	int arr[n];
	
	for(int i=0;i<n;i++){
	    cin>>arr[i];
	}
	maxSubarraySum(arr, n);
	return 0;
}


---------------------------------------------------------------------------------------------------------------

Method 2. creating a prefix sum array    -  O(n2), O(n)

#include <bits/stdc++.h>
using namespace std;

void maxSubarraySum(int arr[],int n){
    int max=INT_MIN;
    
    int prefixarray[n+1];
    prefixarray[0]=0;
    
    for(int i=0;i<n;i++){
        prefixarray[i]=prefixarray[i-1]+arr[i];
    }
    for (int i=0;i<n;i++) {
        for(int j=i;j<n;j++){
            int sum=0;
            sum= prefixarray[j]-prefixarray[i-1];
            if(sum>max){
                max=sum;
            }
        }
    }
    cout<<max;
}
int main()
{
	int n;
	cin>>n;
	int arr[n];
	
	for(int i=0;i<n;i++){
	    cin>>arr[i];
	}
	maxSubarraySum(arr, n);
	return 0;
}


----------------------------------------------------------------------------------------------

Method 3. Kadane's Algorithm.    - O(n), O(1)

#include <bits/stdc++.h>
using namespace std;

void maxSubarraySum(int arr[],int n){

    int max=INT_MIN;
    int max_till_here=0;
    
    for(int i=0;i<n;i++){
        max_till_here = max_till_here + arr[i];
        
        if(max_till_here>max){
            max= max_till_here;
        }
        if(max_till_here<0){
            max_till_here=0;
        }
    }
    cout<<max;
}
int main()
{
    
	int n;
	cin>>n;
	int arr[n];
	
	for(int i=0;i<n;i++){
	    cin>>arr[i];
	}
	maxSubarraySum(arr, n);
	return 0;
}

